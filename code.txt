Inheritance / extension(python):
class ExtendedClass(ParentClassName):
    def __init__(self, x, y, z):
        ParentClassName.__init__(self, x, y) #inheriting from the parent class
        self.z = z
________________________________________________________________________________________________________________________________________

How is reflection used?(python):
#Using the type() method to check the type
    type("Hello World") #type = str
    type(1) #type = int
    type(1.0) #type = float
#if an object is an instance of a certain class
    isinstance("Hello World", str) #isinstance = true
    isinstance(1, int) #isinstance = true
    isinstance(1.0, bool) #isinstance = false, 5.0 is a float
        
_______________________________________________________________________________________________________________________________________

How is reflection used?(Java):
//inspect methods
  Method[] methods = MyObject.getClass().getMethods();

    for(Method method : methods){
        System.out.println("method = " + method.getName());
    }
//inspect fields
 Field[] fields = MyObject.getClass().getFields();
    for( field : fields){
        System.out.println("field = " + field.getName());
    }
        
_______________________________________________________________________________________________________________________________________

How are values compared? (Java):
public class CompTest{
    public static void main(String[] args) {
        String s1 = "S1";
        String s2 = "S2";
        if(s1.equals(s2)) {
            System.out.println("String 1 and String 2 are equal");
        } else {
            System.out.println("String 1 is not equal to string 2");
        }

        int i = 0;
        int j = 0;
        if(i == j) {
            System.out.println("i and j are equal");
        } else {
            System.out.println("i and j are not equal");
        }
    }
}

_______________________________________________________________________________________________________________________________________

event-listener(python):
class Event( object ):
    """
    Generic event to use with EventDispatcher.
    """

    def __init__(self, event_type, data=None):
        """
        The constructor accepts an event type as string and a custom data
        """
        self._type = event_type
        self._data = data

    @property
    def type(self):
        """
        Returns the event type
        """
        return self._type

    @property
    def data(self):
        """
        Returns the data associated to the event
        """
        return self._data
________________________________________________________________________________________________________________________________________

event-listener(Java):
public class MultiListener ... implements ActionListener {
    ...
    //where initialization occurs:
        button1.addActionListener(this);
        button2.addActionListener(this);

        button2.addActionListener(new Eavesdropper(bottomTextArea));
    }

    public void actionPerformed(ActionEvent e) {
        topTextArea.append(e.getActionCommand() + newline);
    }
}

class Eavesdropper implements ActionListener {
    ...
    public void actionPerformed(ActionEvent e) {
        myTextArea.append(e.getActionCommand() + newline);
    }
}

_______________________________________________________________________________________________________________________________________

singleton(python):
class MyClass:

    def __init__(self, something):
        self.inner = something

    def me(self):
        print self.inner
        
_______________________________________________________________________________________________________________________________________

singleton(Java):
class Singleton
{
    // static variable single_instance of type Singleton
    private static Singleton single_instance = null;
 
    // variable of type String
    public String s;
 
    // private constructor restricted to this class itself
    private Singleton()
    {
        s = "Hello I am a string part of Singleton class";
    }
 
    // static method to create instance of Singleton class
    public static Singleton getInstance()
    {
        if (single_instance == null)
            single_instance = new Singleton();
 
        return single_instance;
    }
}
